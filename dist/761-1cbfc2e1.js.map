{"version":3,"file":"761-1cbfc2e1.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./packages/ui/src/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/ui/src/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./packages/core/src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts","webpack://checkout/./packages/ui/src/accordion/AccordionContext.tsx","webpack://checkout/./packages/ui/src/icon/IconError.tsx","webpack://checkout/./packages/ui/src/icon/IconSuccess.tsx","webpack://checkout/./packages/ui/src/icon/IconInfo.tsx","webpack://checkout/./packages/ui/src/alert/Alert.tsx","webpack://checkout/./packages/ui/src/form/BasicFormField/BasicFormField.tsx","webpack://checkout/./packages/ui/src/form/CheckboxInput/CheckboxInput.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/MultiCheckboxControl.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/CheckboxGroupFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormField.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicFormFieldType.ts","webpack://checkout/./packages/ui/src/icon/IconChevronDown.tsx","webpack://checkout/./packages/ui/src/form/TextArea/TextArea.tsx","webpack://checkout/./packages/ui/src/form/DynamicFormField/DynamicInput.tsx","webpack://checkout/./packages/ui/src/form/Fieldset/Fieldset.tsx","webpack://checkout/./packages/ui/src/form/FormField/FormField.tsx","webpack://checkout/./packages/ui/src/form/FormFieldContainer/FormFieldContainer.tsx","webpack://checkout/./packages/ui/src/form/FormFieldError/FormFieldError.tsx","webpack://checkout/./packages/ui/src/form/Input/Input.tsx","webpack://checkout/./packages/ui/src/form/Label/Label.tsx","webpack://checkout/./packages/ui/src/form/RadioInput/RadioInput.tsx","webpack://checkout/./packages/ui/src/form/TextInput/TextInput.tsx","webpack://checkout/./packages/ui/src/icon/IconHelp.tsx","webpack://checkout/./packages/ui/src/loading/LoadingSpinner.tsx","webpack://checkout/./packages/ui/src/loading/LoadingOverlay.tsx","webpack://checkout/./packages/ui/src/tooltip/TooltipTrigger.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nimport {\n    CHECKOUT_ROOT_NODE_ID,\n    MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <div className=\"dropdownTrigger\" onClick={this.handleClick} ref={ref}>\n                            {children}\n                        </div>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        !shouldShow ? null : (\n                            <div\n                                className=\"dropdownMenu\"\n                                ref={ref}\n                                style={{\n                                    ...style,\n                                    width: '100%',\n                                    zIndex: 1,\n                                }}\n                            >\n                                {dropdown}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = (event) => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            this.getRootElement()?.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            this.getRootElement()?.removeEventListener('click', this.handleClose);\n        });\n    };\n\n    private getRootElement() {\n        return (\n            document.getElementById(CHECKOUT_ROOT_NODE_ID) ||\n            document.getElementById(MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID)\n        );\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { ReactNode, useState } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nconst Accordion = ({\n    children,\n    className = 'accordion',\n    defaultSelectedItemId,\n    isDisabled,\n    onSelect = noop,\n}: AccordionProps) => {\n    const [selectedItemId, setSelectedItemId] = useState<string | undefined>(defaultSelectedItemId);\n\n    const handleToggleItem: (id: string) => void = (id) => {\n        if (isDisabled) {\n            return;\n        }\n\n        setSelectedItemId(id);\n        onSelect(id);\n    };\n\n    const getContextValue = memoizeOne((newSelectedItemId?: string) => {\n        return {\n            onToggle: handleToggleItem,\n            selectedItemId: newSelectedItemId,\n        };\n    });\n\n    return (\n        <AccordionContext.Provider value={getContextValue(selectedItemId)}>\n            <ul className={className}>{children}</ul>\n        </AccordionContext.Provider>\n    );\n};\n\nexport default Accordion;\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { Accordion } from '@bigcommerce/checkout/ui';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node: Node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={classNames(className, { [classNameSelected]: isSelected })}>\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children ? (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            ) : null}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '@bigcommerce/checkout/ui';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({ children, testId }) => (\n    <span className=\"tooltip tooltip--basic\" data-test={testId}>\n        {children}\n    </span>\n);\n\nexport default Tooltip;\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconError: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconError);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconSuccess: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconSuccess);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconInfo: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconInfo);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { IconError, IconInfo, IconSuccess } from '../icon';\n\nexport interface AlertProps {\n    additionalClassName?: string;\n    icon?: ReactNode;\n    testId?: string;\n    type?: AlertType;\n}\n\nexport enum AlertType {\n    Error = 'error',\n    Info = 'info',\n    Success = 'success',\n    Warning = 'warning',\n}\n\nfunction renderDefaultIcon(type?: AlertType): ReactNode {\n    switch (type) {\n        case AlertType.Error:\n        case AlertType.Warning:\n            return <IconError />;\n\n        case AlertType.Success:\n            return <IconSuccess />;\n\n        case AlertType.Info:\n        default:\n            return <IconInfo />;\n    }\n}\n\nconst Alert: FunctionComponent<AlertProps> = ({\n    additionalClassName,\n    children,\n    icon,\n    testId,\n    type,\n}) => (\n    <div\n        className={classNames(\n            'alertBox',\n            additionalClassName,\n            { 'alertBox--info': type === AlertType.Info || !type },\n            { 'alertBox--error': type === AlertType.Error },\n            { 'alertBox--success': type === AlertType.Success },\n            { 'alertBox--warning': type === AlertType.Warning },\n        )}\n        data-test={testId}\n    >\n        <div className=\"alertBox-column alertBox-icon\">{icon || renderDefaultIcon(type)}</div>\n\n        <div aria-live=\"assertive\" className=\"alertBox-column alertBox-message\" role=\"alert\">\n            {children}\n        </div>\n    </div>\n);\n\nexport default Alert;\n","import { Field, FieldConfig, FieldProps, getIn } from 'formik';\nimport { isDate, noop } from 'lodash';\nimport React, {\n    Component,\n    createElement,\n    FunctionComponent,\n    memo,\n    useCallback,\n    useMemo,\n} from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\n\nexport interface BasicFormFieldProps extends FieldConfig {\n    additionalClassName?: string;\n    className?: string;\n    testId?: string;\n    onChange?(value: any): void;\n}\n\ntype InnerFieldInputProps = FieldProps &\n    Pick<FieldConfig, 'component' | 'render'> & {\n        onChange?(value: string): void;\n    };\n\ntype InnerFieldProps = Omit<BasicFormFieldProps, keyof FieldConfig> & InnerFieldInputProps;\n\nclass InnerFieldInput extends Component<InnerFieldInputProps> {\n    componentDidUpdate({ field: prevField }: InnerFieldInputProps) {\n        const {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            field: { value },\n            onChange = noop,\n        } = this.props;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparableValue = isDate(value) ? value.getTime() : value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const comparablePrevValue = isDate(prevField.value)\n            ? prevField.value.getTime()\n            : prevField.value;\n\n        if (comparableValue !== comparablePrevValue) {\n            onChange(value);\n        }\n    }\n\n    render() {\n        const { component = 'input', field, render } = this.props;\n\n        if (render) {\n            return render(this.props);\n        }\n\n        if (typeof component === 'string') {\n            return createElement(component, field);\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n        return createElement(component as any, this.props);\n    }\n}\n\nconst InnerField: FunctionComponent<InnerFieldProps> = memo(\n    ({ additionalClassName, component, field, form, onChange, render, testId }) => {\n        const input = useMemo(\n            () => (\n                <InnerFieldInput\n                    component={component}\n                    field={field}\n                    form={form}\n                    onChange={onChange}\n                    render={render}\n                />\n            ),\n            [field, form, onChange, component, render],\n        );\n\n        return (\n            <FormFieldContainer\n                additionalClassName={additionalClassName}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                hasError={getIn(form.errors, field.name)}\n                testId={testId}\n            >\n                {input}\n            </FormFieldContainer>\n        );\n    },\n    (\n        { form: prevForm, field: prevField, ...prevProps },\n        { form: nextForm, field: nextField, ...nextProps },\n    ) =>\n        shallowEqual(prevProps, nextProps) &&\n        shallowEqual(prevForm, nextForm) &&\n        shallowEqual(prevField, nextField),\n);\n\nconst BasicFormField: FunctionComponent<BasicFormFieldProps> = ({\n    additionalClassName,\n    className,\n    component,\n    render,\n    testId,\n    onChange,\n    ...rest\n}) => {\n    const renderInnerField = useCallback(\n        (props: FieldProps) => (\n            <InnerField\n                {...props}\n                additionalClassName={additionalClassName}\n                className={className}\n                component={component}\n                onChange={onChange}\n                render={render}\n                testId={testId}\n            />\n        ),\n        [additionalClassName, className, component, render, testId, onChange],\n    );\n\n    return <Field {...rest} render={renderInnerField} />;\n};\n\nexport default memo(BasicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\nimport { Label } from '../Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","/* istanbul ignore file */\n\nimport React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId || ''}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","/* istanbul ignore file */\n\nimport { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { FormFieldContainer } from '../FormFieldContainer';\nimport { FormFieldError } from '../FormFieldError';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.CHECKBOX}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField } from '../FormField';\nimport { Label } from '../Label';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n        inputDateFormat,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.NUMBER;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.TELEPHONE;\n            }\n\n            return secret ? DynamicFormFieldType.PASSWORD : DynamicFormFieldType.TEXT;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, name, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                inputDateFormat={inputDateFormat}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && options.rows}\n            />\n        ),\n        [\n            inputDateFormat,\n            fieldInputId,\n            autocomplete,\n            dynamicFormFieldType,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass || ''}`}>\n            {fieldType === DynamicFormFieldType.CHECKBOX ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","enum DynamicFormFieldType {\n    TELEPHONE = 'tel',\n    DROPDOWM = 'dropdown',\n    NUMBER = 'number',\n    PASSWORD = 'password',\n    CHECKBOX = 'checkbox',\n    MULTILINE = 'multiline',\n    DATE = 'date',\n    RADIO = 'radio',\n    TEXT = 'text',\n}\n\nexport default DynamicFormFieldType;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconChevronDown: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconChevronDown);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate } from '@bigcommerce/checkout/locale';\n\nimport { IconChevronDown } from '../../icon';\nimport { CheckboxInput } from '../CheckboxInput';\nimport { InputProps } from '../Input';\nimport { RadioInput } from '../RadioInput';\nimport { TextArea } from '../TextArea';\nimport { TextInput } from '../TextInput';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n    isFloatingLabelEnabled?: boolean;\n    inputDateFormat?: string;\n    date?: {\n        inputFormat: string;\n    };\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    isFloatingLabelEnabled,\n    date,\n    inputDateFormat,\n    ...rest\n}) => {\n    const inputFormat = inputDateFormat || date?.inputFormat || '';\n\n    const handleDateChange = useCallback(\n        (dateValue: string, event) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.DROPDOWM:\n            return (\n                <>\n                    <div\n                        className={classNames(\n                            { 'dropdown-chevron': !isFloatingLabelEnabled },\n                            { 'floating-select-chevron': isFloatingLabelEnabled },\n                        )}\n                    >\n                        <IconChevronDown />\n                    </div>\n                    <select\n                        {...(rest as any)}\n                        className={classNames(\n                            { 'floating-select': isFloatingLabelEnabled },\n                            'form-select optimizedCheckout-form-select',\n                        )}\n                        data-test={`${id}-select`}\n                        id={id}\n                        name={name}\n                        onChange={onChange}\n                        value={value ?? ''}\n                    >\n                        {!!placeholder && <option value=\"\">{placeholder}</option>}\n                        {options &&\n                            options.map(({ label, value: optionValue }) => (\n                                <option key={optionValue} value={optionValue}>\n                                    {label}\n                                </option>\n                            ))}\n                    </select>\n                </>\n            );\n\n        case DynamicFormFieldType.RADIO:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.CHECKBOX:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.DATE:\n            return (\n                <ReactDatePicker\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.MULTILINE:\n            return (\n                <TextArea\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.PASSWORD ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import classNames from 'classnames';\nimport React, { FieldsetHTMLAttributes, forwardRef, ReactNode, Ref } from 'react';\n\nexport interface FieldsetProps extends FieldsetHTMLAttributes<HTMLFieldSetElement> {\n    additionalClassName?: string;\n    testId?: string;\n    legend?: ReactNode;\n}\n\nconst Fieldset = forwardRef(\n    (\n        { additionalClassName, children, className, legend, testId, ...rest }: FieldsetProps,\n        ref: Ref<HTMLFieldSetElement>,\n    ) => (\n        <fieldset\n            {...rest}\n            className={className || classNames('form-fieldset', additionalClassName)}\n            data-test={testId}\n            ref={ref}\n        >\n            {legend}\n\n            <div className=\"form-body\">{children}</div>\n        </fieldset>\n    ),\n);\n\nexport default Fieldset;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport { BasicFormField } from '../BasicFormField';\nimport { FormFieldError } from '../FormFieldError';\nimport { Label } from '../Label';\n\nexport interface FormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    label?: ReactNode | ((fieldName: string) => ReactNode);\n    labelContent?: ReactNode;\n    footer?: ReactNode;\n    id?: string;\n    input(field: FieldProps<string>): ReactNode;\n    onChange?(value: string): void;\n}\n\nconst FormField: FunctionComponent<FormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    label,\n    onChange,\n    footer,\n    input,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        (props: FieldProps<string>) => (\n            <>\n                {Boolean(label) && (typeof label === 'function' ? label(name) : label)}\n\n                {Boolean(labelContent && !label) && (\n                    <Label htmlFor={name} id={`${id ?? name}-label`}>\n                        {labelContent}\n                    </Label>\n                )}\n\n                {input(props)}\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n\n                {footer}\n            </>\n        ),\n        [label, labelContent, id, input, name, footer],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(FormField);\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldContainerProps {\n    additionalClassName?: string;\n    children: ReactNode;\n    className?: string;\n    hasError?: boolean;\n    testId?: string;\n}\n\nconst FormFieldContainer: FunctionComponent<FormFieldContainerProps> = ({\n    additionalClassName,\n    children,\n    className,\n    hasError,\n    testId,\n}) => (\n    <FormContext.Consumer>\n        {({ isSubmitted }) => (\n            <div\n                className={\n                    className ||\n                    classNames('form-field', additionalClassName, {\n                        'form-field--error': hasError && isSubmitted,\n                    })\n                }\n                data-test={testId}\n            >\n                {children}\n            </div>\n        )}\n    </FormContext.Consumer>\n);\n\nexport default memo(FormFieldContainer);\n","import { ErrorMessage } from 'formik';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { FormContext } from '../contexts';\n\nexport interface FormFieldErrorProps {\n    name: string;\n    testId?: string;\n    errorId: string;\n}\n\nconst FormFieldError: FunctionComponent<FormFieldErrorProps> = ({ name, testId, errorId }) => {\n    const renderMessage = useCallback(\n        (message: string) => (\n            <ul className=\"form-field-errors\" data-test={testId}>\n                <li className=\"form-field-error\">\n                    <label\n                        aria-live=\"polite\"\n                        className=\"form-inlineMessage\"\n                        htmlFor={name}\n                        id={errorId}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </label>\n                </li>\n            </ul>\n        ),\n        [errorId, name, testId],\n    );\n\n    return (\n        <FormContext.Consumer>\n            {({ isSubmitted }) =>\n                isSubmitted && <ErrorMessage name={name} render={renderMessage} />\n            }\n        </FormContext.Consumer>\n    );\n};\n\nexport default memo(FormFieldError);\n","import React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    testId?: string;\n}\n\nconst Input = forwardRef(({ testId, ...rest }: InputProps, ref: Ref<HTMLInputElement>) => (\n    <input {...rest} data-test={testId} ref={ref} />\n));\n\nexport default Input;\n","import classNames from 'classnames';\nimport React, { FunctionComponent, LabelHTMLAttributes } from 'react';\n\nexport interface LabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n    testId?: string;\n    hidden?: boolean;\n}\n\nconst Label: FunctionComponent<LabelProps> = ({ children, className, hidden, testId, ...rest }) => (\n    <label\n        {...rest}\n        className={classNames(\n            className || 'form-label',\n            { 'is-srOnly': hidden },\n            'optimizedCheckout-form-label',\n        )}\n        data-test={testId}\n    >\n        {children}\n    </label>\n);\n\nexport default Label;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from '../Input/Input';\nimport Label from '../Label/Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref } from 'react';\n\nimport { Input, InputProps } from '../Input';\n\nexport interface TextInputProps extends InputProps {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    type?: 'text' | 'password' | 'tel' | 'email' | 'number';\n}\n\nconst TextInput = forwardRef(\n    (\n        { additionalClassName, appearFocused, type = 'text', ...rest }: TextInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <Input\n            {...rest}\n            className={classNames(\n                'form-input',\n                'optimizedCheckout-form-input',\n                { 'form-input--focus': appearFocused },\n                { 'optimizedCheckout-form-input--focus': appearFocused },\n                additionalClassName,\n            )}\n            ref={ref}\n            type={type}\n        />\n    ),\n);\n\nexport default TextInput;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import React, { FunctionComponent, memo } from 'react';\n\nexport interface LoadingSpinnerProps {\n    isLoading: boolean;\n}\n\nconst LoadingSpinner: FunctionComponent<LoadingSpinnerProps> = ({ isLoading }) => {\n    if (!isLoading) {\n        return null;\n    }\n\n    return (\n        <div\n            aria-busy=\"true\"\n            className=\"loadingSpinner loadingOverlay-container\"\n            role=\"status\"\n            style={{ height: 100 }}\n        >\n            <div className=\"loadingOverlay optimizedCheckout-overlay\" />\n        </div>\n    );\n};\n\nexport default memo(LoadingSpinner);\n","import React, { FunctionComponent } from 'react';\n\nimport LoadingSpinner from './LoadingSpinner';\n\nexport interface LoadingOverlayProps {\n    isLoading: boolean;\n    hideContentWhenLoading?: boolean;\n    unmountContentWhenLoading?: boolean;\n}\n\nconst LoadingOverlay: FunctionComponent<LoadingOverlayProps> = ({\n    children,\n    hideContentWhenLoading,\n    unmountContentWhenLoading,\n    isLoading,\n}) => {\n    if (hideContentWhenLoading || unmountContentWhenLoading) {\n        return (\n            <>\n                <LoadingSpinner isLoading={isLoading} />\n                {unmountContentWhenLoading && isLoading ? null : (\n                    <div\n                        style={{\n                            display: hideContentWhenLoading && isLoading ? 'none' : undefined,\n                        }}\n                    >\n                        {children}\n                    </div>\n                )}\n            </>\n        );\n    }\n\n    return (\n        <div className=\"loadingOverlay-container\">\n            {children}\n            {isLoading && (\n                <div\n                    className=\"loadingOverlay optimizedCheckout-overlay\"\n                    data-test=\"loading-overlay\"\n                />\n            )}\n        </div>\n    );\n};\n\nexport default LoadingOverlay;\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Placement } from 'popper.js';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    {({ ref }) => (\n                        <span\n                            onBlur={this.handleHide}\n                            onFocus={this.handleShow}\n                            onMouseEnter={this.handleShow}\n                            onMouseLeave={this.handleHide}\n                            ref={ref}\n                        >\n                            {children}\n                        </span>\n                    )}\n                </Reference>\n\n                <Popper\n                    modifiers={{\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    }}\n                    placement={placement}\n                >\n                    {({ ref, style }) =>\n                        shouldShow && (\n                            <div ref={ref} style={style}>\n                                {tooltip}\n                            </div>\n                        )\n                    }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","getRootElement","addEventListener","removeEventListener","componentWillUnmount","document","this","render","children","placement","dropdown","ref","className","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","getElementById","defaultProps","Component","defaultSelectedItemId","isDisabled","onSelect","noop","useState","selectedItemId","setSelectedItemId","handleToggleItem","id","getContextValue","memoizeOne","newSelectedItemId","onToggle","AccordionContext","A","Provider","value","ChecklistContext","createContext","undefined","setFieldValue","handleSelect","useCallback","contextValue","useMemo","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","useContext","isSelected","transitionEndListener","node","done","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","type","Label","htmlFor","content","htmlId","kebabCase","label","rest","Checklist","C","renderInput","field","disabled","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","onChange","testId","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID","withIconContainer","height","viewBox","xmlns","d","AlertType","additionalClassName","icon","Info","Error","Success","Warning","renderDefaultIcon","role","componentDidUpdate","prevField","isDate","getTime","component","createElement","InnerField","form","input","InnerFieldInput","hasError","getIn","errors","prevForm","nextForm","nextField","renderInnerField","Field","forwardRef","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","TranslatedString","href","MultiCheckboxFormField","values","options","push","remove","handleSelectAll","checkedValues","difference","map","forEach","val","handleSelectNone","handleInputChange","target","indexOf","FormFieldContainer","length","DynamicInput","fieldType","DynamicFormFieldType","CHECKBOX","FormFieldError","errorId","renderField","renderProps","pick","FieldArray","secret","fieldLabel","required","max","min","maxLength","inputDateFormat","parentFieldName","placeholder","inputId","autocomplete","extraClass","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","NUMBER","includes","TELEPHONE","PASSWORD","TEXT","autoComplete","items","helperLabel","rows","FormField","withDate","isFloatingLabelEnabled","date","inputFormat","handleDateChange","dateValue","DROPDOWM","optionValue","key","RADIO","RadioInput","CheckboxInput","Array","isArray","DATE","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","MULTILINE","TextInput","legend","labelContent","footer","Boolean","Consumer","isSubmitted","renderMessage","message","ErrorMessage","hidden","appearFocused","hideContentWhenLoading","unmountContentWhenLoading","isLoading","display","handleShow","handleHide","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave"],"sourceRoot":""}